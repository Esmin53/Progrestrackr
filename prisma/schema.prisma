generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  goal
  steps
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Task          Task[]
}

model Step {
  id           String     @id @default(cuid())
  title        String
  completed    Boolean
  task         Task       @relation(fields: [taskId], references: [id])
  taskId       String
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  goal          Int?
  goalProgress  Int?
  progresPercentage Int? @default(0) 
  Step          Step[]
  type          VoteType

  author        User    @relation(fields: [authorId], references: [id])
  authorId      String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}